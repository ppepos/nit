# Parser generated by nitcc for the grammar butter
module butter_parser is no_warning("missing-doc","old-init")
import nitcc_runtime
class Parser_butter
	super Parser
	redef fun start_state do return state_Start
end
private fun state_Start: LRStateStart do return once new LRStateStart
private fun state_nodes: LRStatenodes do return once new LRStatenodes
private fun state_node_43d: LRStatenode_43d do return once new LRStatenode_43d
private fun state_node: LRStatenode do return once new LRStatenode
private fun state_text: LRStatetext do return once new LRStatetext
private fun state_var_tag: LRStatevar_tag do return once new LRStatevar_tag
private fun state_for_block: LRStatefor_block do return once new LRStatefor_block
private fun state_for_tag_open: LRStatefor_tag_open do return once new LRStatefor_tag_open
private fun state_nodes_32dEof: LRStatenodes_32dEof do return once new LRStatenodes_32dEof
private fun state_node_43d_32dnode: LRStatenode_43d_32dnode do return once new LRStatenode_43d_32dnode
private fun state_for_tag_open_32dnodes: LRStatefor_tag_open_32dnodes do return once new LRStatefor_tag_open_32dnodes
private fun state_for_tag_open_32dnodes_32dfor_tag_close: LRStatefor_tag_open_32dnodes_32dfor_tag_close do return once new LRStatefor_tag_open_32dnodes_32dfor_tag_close
private fun goto_Nnodes: Goto_Nnodes do return once new Goto_Nnodes
private fun reduce_Nnodes_95d0(parser: Parser) do
		# REDUCE nodes::nodes_0=node+
		var n0 = parser.pop.as(Nodes[Nnode])
		var p1 = new Nnodes(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nnodes)
end
private fun reduce_Nnodes_95d1(parser: Parser) do
		# REDUCE nodes::nodes_1=
		var p1 = new Nnodes(null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nnodes)
end
private fun goto_Nnode: Goto_Nnode do return once new Goto_Nnode
private fun reduce_Nnode_95d0(parser: Parser) do
		# REDUCE node::node_0=text
		var n0 = parser.pop.as(Ntext)
		var p1 = new Nnode_95d0(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nnode)
end
private fun reduce_Nnode_95d1(parser: Parser) do
		# REDUCE node::node_1=var_tag
		var n0 = parser.pop.as(Nvar_tag)
		var p1 = new Nnode_95d1(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nnode)
end
private fun reduce_Nnode_95d2(parser: Parser) do
		# REDUCE node::node_2=for_block
		var n0 = parser.pop.as(Nfor_block)
		var p1 = new Nnode_95d2(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nnode)
end
private fun goto_Nfor_block: Goto_Nfor_block do return once new Goto_Nfor_block
private fun reduce_Nfor_block(parser: Parser) do
		# REDUCE for_block::for_block=for_tag_open nodes for_tag_close
		var n2 = parser.pop.as(Nfor_tag_close)
		var n1 = parser.pop.as(Nnodes)
		var n0 = parser.pop.as(Nfor_tag_open)
		var p1 = new Nfor_block(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nfor_block)
end
private fun goto_Nnode_43d: Goto_Nnode_43d do return once new Goto_Nnode_43d
private fun reduce_Nnode_43d_one(parser: Parser) do
		# REDUCE node+::node+_one=node
		var n0 = parser.pop.as(Nnode)
		var prod = new Nodes[Nnode]
		prod.children.add(n0)
		parser.node_stack.push prod
		parser.goto(goto_Nnode_43d)
end
private fun reduce_Nnode_43d_more(parser: Parser) do
		# REDUCE node+::node+_more=node+ node
		var n1 = parser.pop.as(Nnode)
		var n0 = parser.pop.as(Nodes[Nnode])
		var prod = n0
		n0.children.add(n1)
		parser.node_stack.push prod
		parser.goto(goto_Nnode_43d)
end
private fun goto_N_start: Goto_N_start do return once new Goto_N_start
private fun reduce_NStart(parser: Parser) do
		# REDUCE _start::Start=nodes Eof
		var n1 = parser.pop.as(NEof)
		var n0 = parser.pop.as(Nnodes)
		var p1 = new NStart(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.stop = true
end
redef class NToken
	# guarded action for state Start
	# 3 shift(s) and 1 reduce(s)
	private fun action_sStart(parser: Parser) do
		reduce_Nnodes_95d1(parser)
	end
	# guarded action for state nodes
	# 1 shift(s) and 0 reduce(s)
	private fun action_snodes(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state node+
	# 3 shift(s) and 1 reduce(s)
	private fun action_snode_43d(parser: Parser) do
		reduce_Nnodes_95d0(parser)
	end
	# guarded action for state for_tag_open
	# 3 shift(s) and 1 reduce(s)
	private fun action_sfor_tag_open(parser: Parser) do
		reduce_Nnodes_95d1(parser)
	end
	# guarded action for state for_tag_open nodes
	# 1 shift(s) and 0 reduce(s)
	private fun action_sfor_tag_open_32dnodes(parser: Parser) do
		parser.parse_error
	end
end
class Ntext
	super NToken
	redef fun action_sStart(parser) do
		parser.shift(state_text)
	end
	redef fun action_snode_43d(parser) do
		parser.shift(state_text)
	end
	redef fun action_sfor_tag_open(parser) do
		parser.shift(state_text)
	end
	redef fun node_name do return "text"
end
class Nvar_tag
	super NToken
	redef fun action_sStart(parser) do
		parser.shift(state_var_tag)
	end
	redef fun action_snode_43d(parser) do
		parser.shift(state_var_tag)
	end
	redef fun action_sfor_tag_open(parser) do
		parser.shift(state_var_tag)
	end
	redef fun node_name do return "var_tag"
end
class Nfor_tag_open
	super NToken
	redef fun action_sStart(parser) do
		parser.shift(state_for_tag_open)
	end
	redef fun action_snode_43d(parser) do
		parser.shift(state_for_tag_open)
	end
	redef fun action_sfor_tag_open(parser) do
		parser.shift(state_for_tag_open)
	end
	redef fun node_name do return "for_tag_open"
end
class Nfor_tag_close
	super NToken
	redef fun action_sfor_tag_open_32dnodes(parser) do
		parser.shift(state_for_tag_open_32dnodes_32dfor_tag_close)
	end
	redef fun node_name do return "for_tag_close"
end
redef class NEof
	super NToken
	redef fun action_snodes(parser) do
		parser.shift(state_nodes_32dEof)
	end
	redef fun node_name do return "Eof"
end
redef class LRGoto
	private fun goto_sStart(parser: Parser) do abort
	private fun goto_snode_43d(parser: Parser) do abort
	private fun goto_sfor_tag_open(parser: Parser) do abort
end
class Goto_Nnodes
	super LRGoto
	redef fun goto_sStart(parser) do
		parser.push(state_nodes)
	end
	redef fun goto_sfor_tag_open(parser) do
		parser.push(state_for_tag_open_32dnodes)
	end
end
class Goto_Nnode
	super LRGoto
	redef fun goto_sStart(parser) do
		parser.push(state_node)
	end
	redef fun goto_snode_43d(parser) do
		parser.push(state_node_43d_32dnode)
	end
	redef fun goto_sfor_tag_open(parser) do
		parser.push(state_node)
	end
end
class Goto_Nfor_block
	super LRGoto
	redef fun goto_sStart(parser) do
		parser.push(state_for_block)
	end
	redef fun goto_snode_43d(parser) do
		parser.push(state_for_block)
	end
	redef fun goto_sfor_tag_open(parser) do
		parser.push(state_for_block)
	end
end
class Goto_Nnode_43d
	super LRGoto
	redef fun goto_sStart(parser) do
		parser.push(state_node_43d)
	end
	redef fun goto_sfor_tag_open(parser) do
		parser.push(state_node_43d)
	end
end
class Goto_N_start
	super LRGoto
end
class Nnodes
	super NProd
	redef fun node_name do return "nodes"
	var n_node: nullable Nodes[Nnode]
	init(n_node: nullable Nodes[Nnode]) do
		self.n_node = n_node
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_node
		abort
	end
end
class Nnode
	super NProd
	redef fun node_name do return "node"
end
class Nnode_95d0
	super Nnode
	redef fun node_name do return "node_0"
	var n_text: Ntext
	init(n_text: Ntext) do
		self.n_text = n_text
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_text
		abort
	end
end
class Nnode_95d1
	super Nnode
	redef fun node_name do return "node_1"
	var n_var_tag: Nvar_tag
	init(n_var_tag: Nvar_tag) do
		self.n_var_tag = n_var_tag
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_var_tag
		abort
	end
end
class Nnode_95d2
	super Nnode
	redef fun node_name do return "node_2"
	var n_for_block: Nfor_block
	init(n_for_block: Nfor_block) do
		self.n_for_block = n_for_block
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_for_block
		abort
	end
end
class Nfor_block
	super NProd
	redef fun node_name do return "for_block"
	var n_for_tag_open: Nfor_tag_open
	var n_nodes: Nnodes
	var n_for_tag_close: Nfor_tag_close
	init(n_for_tag_open: Nfor_tag_open, n_nodes: Nnodes, n_for_tag_close: Nfor_tag_close) do
		self.n_for_tag_open = n_for_tag_open
		self.n_nodes = n_nodes
		self.n_for_tag_close = n_for_tag_close
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_for_tag_open
		if i == 1 then return n_nodes
		if i == 2 then return n_for_tag_close
		abort
	end
end
class N_start
	super NProd
	redef fun node_name do return "_start"
end
class NStart
	super N_start
	redef fun node_name do return "Start"
	var n_0: Nnodes
	var n_1: NEof
	init(n_0: Nnodes, n_1: NEof) do
		self.n_0 = n_0
		self.n_1 = n_1
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_1
		abort
	end
end
# State Start
private class LRStateStart
	super LRState
	redef fun to_s do return "Start"
	redef fun error_msg do return "nodes, node+, node, for_block"
	redef fun action(parser) do
		parser.peek_token.action_sStart(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_sStart(parser)
	end
end
# State nodes
private class LRStatenodes
	super LRState
	redef fun to_s do return "nodes"
	redef fun error_msg do return "Eof"
	redef fun action(parser) do
		parser.peek_token.action_snodes(parser)
	end
end
# State node+
private class LRStatenode_43d
	super LRState
	redef fun to_s do return "node+"
	redef fun error_msg do return "node, for_block"
	redef fun action(parser) do
		parser.peek_token.action_snode_43d(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_snode_43d(parser)
	end
end
# State node
private class LRStatenode
	super LRState
	redef fun to_s do return "node"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nnode_43d_one(parser)
	end
end
# State text
private class LRStatetext
	super LRState
	redef fun to_s do return "text"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nnode_95d0(parser)
	end
end
# State var_tag
private class LRStatevar_tag
	super LRState
	redef fun to_s do return "var_tag"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nnode_95d1(parser)
	end
end
# State for_block
private class LRStatefor_block
	super LRState
	redef fun to_s do return "for_block"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nnode_95d2(parser)
	end
end
# State for_tag_open
private class LRStatefor_tag_open
	super LRState
	redef fun to_s do return "for_tag_open"
	redef fun error_msg do return "nodes, node+, node, for_block"
	redef fun action(parser) do
		parser.peek_token.action_sfor_tag_open(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_sfor_tag_open(parser)
	end
end
# State nodes Eof
private class LRStatenodes_32dEof
	super LRState
	redef fun to_s do return "nodes Eof"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_NStart(parser)
	end
end
# State node+ node
private class LRStatenode_43d_32dnode
	super LRState
	redef fun to_s do return "node+ node"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nnode_43d_more(parser)
	end
end
# State for_tag_open nodes
private class LRStatefor_tag_open_32dnodes
	super LRState
	redef fun to_s do return "for_tag_open nodes"
	redef fun error_msg do return "for_tag_close"
	redef fun action(parser) do
		parser.peek_token.action_sfor_tag_open_32dnodes(parser)
	end
end
# State for_tag_open nodes for_tag_close
private class LRStatefor_tag_open_32dnodes_32dfor_tag_close
	super LRState
	redef fun to_s do return "for_tag_open nodes for_tag_close"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nfor_block(parser)
	end
end
